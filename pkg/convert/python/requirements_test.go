package python

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestParseRequirementsTxt(t *testing.T) {
	tests := []struct {
		name string
		data string
		want []string
	}{
		{
			"empty",
			``,
			[]string{},
		},
		{
			"comment",
			`# comment`,
			[]string{},
		},
		{
			"comment with single package",
			`# comment
foo`,
			[]string{"foo"},
		},
		{
			"single package",
			`foo==0.12.0         # via foo`,
			[]string{"foo"},
		},
		{
			"multiple packages with extra",
			`bar[x]>=2.34.0      # via foo, bar
baz[x,z]=<1.31.5    # via -r -`,
			[]string{"bar", "baz"},
		},
		{
			"full",
			`#
			# This file is autogenerated by pip-compile
			# To update, run:
			#
			#    pip-compile --output-file=- -
			#
			foo==0.12.0         # via foo
			bar[x]>=2.34.0      # via foo, bar
			baz[x,z]=<1.31.5    # via -r -
			qux					# via -r -
			# The following packages are considered to be unsafe in a requirements file:
			# setuptools
			`,
			[]string{"foo", "bar", "baz", "qux"},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			r := strings.NewReader(tt.data)
			got, err := ParseRequirementsTxt(r)
			assert.NoError(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_stripDep(t *testing.T) {
	tests := []struct {
		dep  string
		want string
	}{
		{
			"",
			"",
		},
		{
			"foo",
			"foo",
		},
		{
			"foo==1.2.3",
			"foo",
		},
		{
			"foo>=1.2.3",
			"foo",
		},
		{
			"foo[x,y]==1.2.3",
			"foo",
		},
		{
			"foo[x,y]>=1.2.3",
			"foo",
		},
		{
			"foo[x,y]<1.2.3",
			"foo",
		},
	}
	for _, tt := range tests {
		t.Run(tt.dep, func(t *testing.T) {
			got, err := stripDep(tt.dep)
			assert.NoError(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}
